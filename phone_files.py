# Подключение модуля работы со временем и модуля работы с файлами
import time
import os.path

# Подключение собственного модуля по проверке телефонного номера
import phone_assay


# Функция определяет режимы доступа к файлу или папке
# (R - на чтение, W - на запись, X - на исполнение)
def checkAccess(filename):
    filemode = ""
    if os.access(filename, os.R_OK):  filemode += "R"
    if os.access(filename, os.W_OK):  filemode += "W"
    if os.access(filename, os.X_OK):  filemode += "X"
    return filemode


# Функция получает и печатает содержание директории
def Directories():
    # Получение пути к текущей директории
    path = os.getcwd()
    # Полагаем, что результат корректен
    ok = True
    # Цикл печати содержания директории
    while ok:
        print("Директория: ", path, ("[монтированная]" if os.path.ismount(path) else ""))

        # Получение содержания текущей директории
        names = os.listdir(path)
        names.sort()

        # Печать списка папок в текущей директории
        for name in names:
            # Формирование полного имени с путем
            item = path + '\\' + name
            # Проверка, что полное имя является папкой
            if os.path.isdir(item):
                # Получение даты и времени создания папки
                when = time.ctime(os.path.getctime(item))
                # Перевод имени папки в верхний регистр
                name = name.upper()
                # Печать информации о папке
                print(name.ljust(40), (chr(32) * 7), when)

        # Печать списка файлов в текущей директории
        for name in names:
            # Формирование полного имени с путем
            item = path + '\\' + name
            # Проверка, что полное имя является файлом
            if os.path.isfile(item):
                # Получение размера файла в байтах
                size = str(os.path.getsize(item))
                # Получение даты и времени изменения файла
                when = time.ctime(os.path.getmtime(item))
                # Перевод имени файла в нижний регистр
                name = name.lower()
                # Разбиение имени на пару (имя - расширение)
                pair = os.path.splitext(name)
                # Печать информации о файле
                print(pair[0].ljust(40), pair[1][1:].center(7), when,
                      size.rjust(12), checkAccess(item))

        # Печать общей информации о директории
        print("Всего имен: ", len(names), chr(13))

        # Полагаем, что результат не корректен, пока имя не введено
        ok = False
        # Цикл ввода имени директории
        while not ok:
            path = input("Введите имя директории [Пусто-Отмена]:>").strip()
            # Если введена пустая строка, то отмена обработки и возврат
            if path == "":
                print("Завершение просмотра директорий")
                break

            # Проверка корректности имени директории
            if not checkFilename(path):
                print("Ошибка: имя директории не корректное")
                continue

            # Проверка существования директории
            if not os.path.isdir(path):
                print("Ошибка: такой директории не существует")
                continue

            # Имя директории корректное и она существует
            ok = True

    print(chr(13))


# Функция проверки имени файла на корректность
# (True - имя корректно или False - имя ошибочное)
def checkFilename(name):
    # Проверить, что имя содержит букву диска
    idx = name.find(":")
    # Если имя содержит диск
    if idx != -1:
        # Проверить, что двоеточие является вторым символом
        # и первым символом является латинская буква
        if idx != 1 or name[0].upper() not in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
            return False
    # Если буква диска с двоеточием находятся в начале имени
    # или имя не содержит буквы диска, то проверить на слеши
    idx = name.count("\\\\")
    # Если имя содержит двойные слеши
    if idx > 0:
        return False
    # Проверить, что имя не заканчивается на слеш
    if name.endswith("\\"):
        return False
    # Проверить, что имя не содержит запрещенных символов
    for idx in name:
        if idx in "\"<*?|>":
            return False
    return True


# Функция для пакетной обработки списка диапазонов телефонных номеров из файла
def checkRanges():
    # Ввод имени исходного файла с перечнем диапазонов номеров
    name = input("Введите имя исходного файла [Пусто-Отмена]:>").strip()
    # Если введена пустая строка, то отмена обработки и возврат
    if name == "": return

    # Проверка корректности имени исходного файла
    if not checkFilename(name):
        print("Ошибка: имя исходного файла не корректное")
        return

    # Проверка существования файла
    if not os.path.exists(name):
        print("Ошибка: файл с указанным именем не существует")
        return

    # Открытие исходного файла на чтение
    try:
        file = open(name, 'r')
    except IOError:
        print("Ошибка: невозможно открыть файл на чтение")
        return

    # Объявление переменной для списка диапазонов
    data = []
    # Чтение данных из исходного файла
    data = file.read().split()
    size = len(data)
    print(data)

    # Проверка на то, что файл не является пустым
    if size == 0:
        print("Ошибка: файл пустой (нет значений)")
        return

    # Проверка на то, что значения являются парными
    if (size % 2) == 1:
        print("Ошибка: файл должен содержать пары значений \n",
              "[левая граница] пробел [правая граница]")
        return

    # Проверка на то, что считанные значения являются цифровыми
    for i in range(size):
        if data[i].isdigit():
            data[i] = int(data[i])
        else:
            print("Ошибка: ", i + 1, "-е значение (", data[i], ") является некорректным")
            return

    # Закрытие исходного файла
    file.close()

    # Ввод имени результирующего файла
    name = input("Введите имя результирующего файла [Пусто-Отмена]:>").strip()
    # Если введена пустая строка, то отмена обработки и возврат
    if name == "": return

    # Проверка корректности имени результирующего файла
    if not checkFilename(name):
        print("Ошибка: имя результирующего файла не корректное")
        return

    # Проверка отсутствия файла
    if os.path.exists(name):
        over = input("Файл уже существует. [W]-Перезаписать?>")
        if over != 'W' and over != 'w':
            return

    # Открытие результирующего файла на запись
    try:
        file = open(name, 'w')
    except IOError:
        print("Ошибка: невозможно открыть файл на запись")
        return

    # Запись в результирующий файл
    for i in range(0, size, 2):
        # Получение границ очередного диапазона
        file.write("Список «Флеш-рояль-даун» номеров \nот " + str(data[i]) + \
                   " до " + str(data[i + 1]) + " >>\n")
        # Обработка очередного диапазона
        for number in range(data[i], data[i + 1] + 1):
            # Проверка номера из диапазона
            if phone_assay.checkBeautiful(number):
                # Запись в файл «красивого» номера
                file.write(str(number) + '\n')
        file.write("Конец\n\n")

    # Закрытие результирующего файла
    file.close()
    print("Обработка успешно завершена", chr(13))


# Функция для пакетной обработки списка телефонных номеров из файла
def checkNumber():
    # Ввод имени исходного файла с номерами
    name = input("Введите имя исходного файла [Пусто-Отмена]:>").strip()
    # Если введена пустая строка, то отмена обработки и возврат
    if name == "": return

    # Проверка корректности имени исходного файла
    if not checkFilename(name):
        print("Ошибка: имя исходного файла не корректное")
        return

    # Проверка существования файла
    if not os.path.exists(name):
        print("Ошибка: файл с указанным именем не существует")
        return

    # Открытие исходного файла на чтение
    try:
        file = open(name, 'r')
    except IOError:
        print("Ошибка: невозможно открыть файл на чтение")
        return

    # Объявление переменной для списка диапазонов
    data = []
    # Чтение данных из исходного файла
    data = file.read().split()
    size = len(data)

    # Проверка на то, что файл не является пустым
    if size == 0:
        print("Ошибка: файл пустой (нет значений)")
        return

    # Проверка на то, что считанные значения являются цифровыми
    for i in range(size):
        if data[i].isdigit():
            data[i] = int(data[i])
        else:
            print("Ошибка: ", i + 1, "-е значение (", data[i], ") является некорректным")
            return
    # Закрытие исходного файла
    file.close()

    # Ввод имени результирующего файла
    name = input("Введите имя результирующего файла [Пусто-Отмена]:>").strip()
    # Если введена пустая строка, то отмена обработки и возврат
    if name == "": return

    # Проверка корректности имени результирующего файла
    if not checkFilename(name):
        print("Ошибка: имя результирующего файла не корректное")
        return

    # Проверка отсутствия файла
    if os.path.exists(name):
        over = input("Файл уже существует. [W]-Перезаписать?>")
        if over != 'W' and over != 'w':
            return

    # Открытие результирующего файла на запись
    try:
        file = open(name, 'w')
    except IOError:
        print("Ошибка: невозможно открыть файл на запись")
        return

    for i in range(size):
        # Проверка номера
        if phone_assay.checkBeautiful(data[i]):
            # Запись в файл «красивого» номера
            file.write(str(data[i]) + ' - Флэш-рояль-даун' + '\n')
        else:
            file.write(str(data[i]) + ' - Прочий номер' + '\n')
    file.close()
    print("Обработка успешно завершена", chr(13))


def callCommand():
    line = input("Введите текст командной строки:>")
    os.system(line)
